// Init
@256
D=A
@SP
M=D
// Call Sys.init
@ret:0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// Goto Sys.init
@Sys.init
0;JMP
(ret:0)
// Function Main.fibonacci
(Main.fibonacci)
// Push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt command
@SP
AM=M-1
D=M
@SP
A=M-1
D=M-D
@TRUE:0
D;JLT
@SP
A=M-1
M=0
@END:0
0;JMP
(TRUE:0)
@SP
A=M-1
M=-1
(END:0)
// If Main.fibonacci$IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// Goto Main.fibonacci$IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// Label Main.fibonacci$IF_TRUE
(Main.fibonacci$IF_TRUE)
// Push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Label Main.fibonacci$IF_FALSE
(Main.fibonacci$IF_FALSE)
// Push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub command
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// Call Main.fibonacci
@ret:1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// Goto Main.fibonacci
@Main.fibonacci
0;JMP
(ret:1)
// Push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub command
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// Call Main.fibonacci
@ret:2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// Goto Main.fibonacci
@Main.fibonacci
0;JMP
(ret:2)
// add command
@SP
AM=M-1
D=M
@SP
A=M-1
M=M+D
// Return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Function Sys.init
(Sys.init)
// Push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// Call Main.fibonacci
@ret:3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// Goto Main.fibonacci
@Main.fibonacci
0;JMP
(ret:3)
// Label Sys.init$WHILE
(Sys.init$WHILE)
// Goto Sys.init$WHILE
@Sys.init$WHILE
0;JMP
